// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package shared

import (
	"github.com/spacemeshos/go-scale"
)

func (t *MerkleProof) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteSliceWithLimit(enc, t.Root, 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSliceWithLimit(enc, t.ProvenLeaves, 150)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSliceWithLimit(enc, t.ProofNodes, 150)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *MerkleProof) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeByteSliceWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.Root = field
	}
	{
		field, n, err := scale.DecodeStructSliceWithLimit[Leaf](dec, 150)
		if err != nil {
			return total, err
		}
		total += n
		t.ProvenLeaves = field
	}
	{
		field, n, err := scale.DecodeStructSliceWithLimit[Node](dec, 150)
		if err != nil {
			return total, err
		}
		total += n
		t.ProofNodes = field
	}
	return total, nil
}

func (t *ProofMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.Proof.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteSliceWithLimit(enc, t.ServicePubKey, 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStringWithLimit(enc, string(t.RoundID), 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *ProofMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.Proof.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeByteSliceWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.ServicePubKey = field
	}
	{
		field, n, err := scale.DecodeStringWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.RoundID = string(field)
	}
	return total, nil
}

func (t *Proof) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.MerkleProof.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSliceWithLimit(enc, t.Members, 150)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.NumLeaves))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Proof) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.MerkleProof.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeStructSliceWithLimit[Member](dec, 150)
		if err != nil {
			return total, err
		}
		total += n
		t.Members = field
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.NumLeaves = uint64(field)
	}
	return total, nil
}

func (t *Member) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteSliceWithLimit(enc, t.Challenge, 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Member) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeByteSliceWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.Challenge = field
	}
	return total, nil
}

func (t *Leaf) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteSliceWithLimit(enc, t.Value, 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Leaf) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeByteSliceWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.Value = field
	}
	return total, nil
}

func (t *Node) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteSliceWithLimit(enc, t.Value, 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Node) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeByteSliceWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.Value = field
	}
	return total, nil
}
