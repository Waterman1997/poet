syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";

package rpc.api.v1;

service PoetService {
    /**
    Submit adds a challenge to the service's current open round,
    to be included its later generated proof.
    */
    rpc Submit (SubmitRequest) returns (SubmitResponse) {
        option (google.api.http) = {
            post: "/v1/submit",
            body: "*",
        };
    }

    /**
    Info returns general information concerning the service,
    including its identity pubkey.
    */
    rpc Info (InfoRequest) returns (InfoResponse) {
        option (google.api.http) = {
            get: "/v1/info"
        };
    }

    /**
    roof returns the generated proof for given round id.
    */
    rpc Proof(ProofRequest) returns (ProofResponse) {
        option (google.api.http) = {
            get: "/v1/proofs/{round_id}"
        };
    }
}

message SubmitRequest {
    uint64 nonce = 1;
    bytes challenge = 2;
    bytes pubkey = 3;
    bytes signature = 4;
}

message SubmitResponse {
    string round_id = 1;
    google.protobuf.Duration round_end = 3;
}

message InfoRequest {
}

message InfoResponse {
    string open_round_id = 1;
    repeated string executing_rounds_ids = 2;
    bytes service_pubkey = 3;
}

message MembershipProof {
    int32 index = 1;
    bytes root = 2;
    repeated bytes proof = 3;
}

message MerkleProof {
    bytes root = 1;
    repeated bytes proven_leaves = 2;
    repeated bytes proof_nodes = 3;
}

message PoetProof {
    MerkleProof proof = 1;
    repeated bytes members = 2;
    uint64 leaves = 3;
}

message ProofRequest {
    string round_id = 1;
}

message ProofResponse {
    PoetProof proof = 1;
    bytes pubkey = 2;
}
