// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	ComputeRequest
	ComputeResponse
	GetNIPRequest
	GetNIPResponse
	GetProofRequest
	GetProofResponse
	CleanRequest
	CleanResponse
	ShutdownRequest
	ShutdownResponse
	VerifyProofRequest
	VerifyProofResponse
	VerifyNIPRequest
	VerifyNIPResponse
	GetRndChallengeRequest
	GetRndChallengeResponse
	DagParams
	Proof
	Labels
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ComputeRequest struct {
	D *DagParams `protobuf:"bytes,1,opt,name=d" json:"d,omitempty"`
}

func (m *ComputeRequest) Reset()                    { *m = ComputeRequest{} }
func (m *ComputeRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputeRequest) ProtoMessage()               {}
func (*ComputeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ComputeRequest) GetD() *DagParams {
	if m != nil {
		return m.D
	}
	return nil
}

type ComputeResponse struct {
	Phi []byte `protobuf:"bytes,1,opt,name=phi,proto3" json:"phi,omitempty"`
}

func (m *ComputeResponse) Reset()                    { *m = ComputeResponse{} }
func (m *ComputeResponse) String() string            { return proto.CompactTextString(m) }
func (*ComputeResponse) ProtoMessage()               {}
func (*ComputeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ComputeResponse) GetPhi() []byte {
	if m != nil {
		return m.Phi
	}
	return nil
}

type GetNIPRequest struct {
}

func (m *GetNIPRequest) Reset()                    { *m = GetNIPRequest{} }
func (m *GetNIPRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNIPRequest) ProtoMessage()               {}
func (*GetNIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetNIPResponse struct {
	Proof *Proof `protobuf:"bytes,1,opt,name=proof" json:"proof,omitempty"`
}

func (m *GetNIPResponse) Reset()                    { *m = GetNIPResponse{} }
func (m *GetNIPResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNIPResponse) ProtoMessage()               {}
func (*GetNIPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetNIPResponse) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type GetProofRequest struct {
	C []string `protobuf:"bytes,1,rep,name=c" json:"c,omitempty"`
}

func (m *GetProofRequest) Reset()                    { *m = GetProofRequest{} }
func (m *GetProofRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProofRequest) ProtoMessage()               {}
func (*GetProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetProofRequest) GetC() []string {
	if m != nil {
		return m.C
	}
	return nil
}

type GetProofResponse struct {
	Proof *Proof `protobuf:"bytes,1,opt,name=proof" json:"proof,omitempty"`
}

func (m *GetProofResponse) Reset()                    { *m = GetProofResponse{} }
func (m *GetProofResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProofResponse) ProtoMessage()               {}
func (*GetProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetProofResponse) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type CleanRequest struct {
}

func (m *CleanRequest) Reset()                    { *m = CleanRequest{} }
func (m *CleanRequest) String() string            { return proto.CompactTextString(m) }
func (*CleanRequest) ProtoMessage()               {}
func (*CleanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type CleanResponse struct {
}

func (m *CleanResponse) Reset()                    { *m = CleanResponse{} }
func (m *CleanResponse) String() string            { return proto.CompactTextString(m) }
func (*CleanResponse) ProtoMessage()               {}
func (*CleanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ShutdownRequest struct {
}

func (m *ShutdownRequest) Reset()                    { *m = ShutdownRequest{} }
func (m *ShutdownRequest) String() string            { return proto.CompactTextString(m) }
func (*ShutdownRequest) ProtoMessage()               {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ShutdownResponse struct {
}

func (m *ShutdownResponse) Reset()                    { *m = ShutdownResponse{} }
func (m *ShutdownResponse) String() string            { return proto.CompactTextString(m) }
func (*ShutdownResponse) ProtoMessage()               {}
func (*ShutdownResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type VerifyProofRequest struct {
	D *DagParams `protobuf:"bytes,1,opt,name=d" json:"d,omitempty"`
	P *Proof     `protobuf:"bytes,2,opt,name=p" json:"p,omitempty"`
	C []string   `protobuf:"bytes,3,rep,name=c" json:"c,omitempty"`
}

func (m *VerifyProofRequest) Reset()                    { *m = VerifyProofRequest{} }
func (m *VerifyProofRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyProofRequest) ProtoMessage()               {}
func (*VerifyProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *VerifyProofRequest) GetD() *DagParams {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *VerifyProofRequest) GetP() *Proof {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *VerifyProofRequest) GetC() []string {
	if m != nil {
		return m.C
	}
	return nil
}

type VerifyProofResponse struct {
	Verified bool `protobuf:"varint,1,opt,name=verified" json:"verified,omitempty"`
}

func (m *VerifyProofResponse) Reset()                    { *m = VerifyProofResponse{} }
func (m *VerifyProofResponse) String() string            { return proto.CompactTextString(m) }
func (*VerifyProofResponse) ProtoMessage()               {}
func (*VerifyProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *VerifyProofResponse) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type VerifyNIPRequest struct {
	D *DagParams `protobuf:"bytes,1,opt,name=d" json:"d,omitempty"`
	P *Proof     `protobuf:"bytes,2,opt,name=p" json:"p,omitempty"`
}

func (m *VerifyNIPRequest) Reset()                    { *m = VerifyNIPRequest{} }
func (m *VerifyNIPRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyNIPRequest) ProtoMessage()               {}
func (*VerifyNIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *VerifyNIPRequest) GetD() *DagParams {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *VerifyNIPRequest) GetP() *Proof {
	if m != nil {
		return m.P
	}
	return nil
}

type VerifyNIPResponse struct {
	Verified bool `protobuf:"varint,1,opt,name=verified" json:"verified,omitempty"`
}

func (m *VerifyNIPResponse) Reset()                    { *m = VerifyNIPResponse{} }
func (m *VerifyNIPResponse) String() string            { return proto.CompactTextString(m) }
func (*VerifyNIPResponse) ProtoMessage()               {}
func (*VerifyNIPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *VerifyNIPResponse) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type GetRndChallengeRequest struct {
	D *DagParams `protobuf:"bytes,1,opt,name=d" json:"d,omitempty"`
}

func (m *GetRndChallengeRequest) Reset()                    { *m = GetRndChallengeRequest{} }
func (m *GetRndChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRndChallengeRequest) ProtoMessage()               {}
func (*GetRndChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetRndChallengeRequest) GetD() *DagParams {
	if m != nil {
		return m.D
	}
	return nil
}

type GetRndChallengeResponse struct {
	C []string `protobuf:"bytes,3,rep,name=c" json:"c,omitempty"`
}

func (m *GetRndChallengeResponse) Reset()                    { *m = GetRndChallengeResponse{} }
func (m *GetRndChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRndChallengeResponse) ProtoMessage()               {}
func (*GetRndChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetRndChallengeResponse) GetC() []string {
	if m != nil {
		return m.C
	}
	return nil
}

type DagParams struct {
	X []byte `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	N uint32 `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
	H string `protobuf:"bytes,3,opt,name=h" json:"h,omitempty"`
}

func (m *DagParams) Reset()                    { *m = DagParams{} }
func (m *DagParams) String() string            { return proto.CompactTextString(m) }
func (*DagParams) ProtoMessage()               {}
func (*DagParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DagParams) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *DagParams) GetN() uint32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *DagParams) GetH() string {
	if m != nil {
		return m.H
	}
	return ""
}

type Proof struct {
	Phi []byte    `protobuf:"bytes,1,opt,name=phi,proto3" json:"phi,omitempty"`
	L   []*Labels `protobuf:"bytes,2,rep,name=l" json:"l,omitempty"`
}

func (m *Proof) Reset()                    { *m = Proof{} }
func (m *Proof) String() string            { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()               {}
func (*Proof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Proof) GetPhi() []byte {
	if m != nil {
		return m.Phi
	}
	return nil
}

func (m *Proof) GetL() []*Labels {
	if m != nil {
		return m.L
	}
	return nil
}

type Labels struct {
	Labels [][]byte `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (m *Labels) Reset()                    { *m = Labels{} }
func (m *Labels) String() string            { return proto.CompactTextString(m) }
func (*Labels) ProtoMessage()               {}
func (*Labels) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Labels) GetLabels() [][]byte {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*ComputeRequest)(nil), "api.ComputeRequest")
	proto.RegisterType((*ComputeResponse)(nil), "api.ComputeResponse")
	proto.RegisterType((*GetNIPRequest)(nil), "api.GetNIPRequest")
	proto.RegisterType((*GetNIPResponse)(nil), "api.GetNIPResponse")
	proto.RegisterType((*GetProofRequest)(nil), "api.GetProofRequest")
	proto.RegisterType((*GetProofResponse)(nil), "api.GetProofResponse")
	proto.RegisterType((*CleanRequest)(nil), "api.CleanRequest")
	proto.RegisterType((*CleanResponse)(nil), "api.CleanResponse")
	proto.RegisterType((*ShutdownRequest)(nil), "api.ShutdownRequest")
	proto.RegisterType((*ShutdownResponse)(nil), "api.ShutdownResponse")
	proto.RegisterType((*VerifyProofRequest)(nil), "api.VerifyProofRequest")
	proto.RegisterType((*VerifyProofResponse)(nil), "api.VerifyProofResponse")
	proto.RegisterType((*VerifyNIPRequest)(nil), "api.VerifyNIPRequest")
	proto.RegisterType((*VerifyNIPResponse)(nil), "api.VerifyNIPResponse")
	proto.RegisterType((*GetRndChallengeRequest)(nil), "api.GetRndChallengeRequest")
	proto.RegisterType((*GetRndChallengeResponse)(nil), "api.GetRndChallengeResponse")
	proto.RegisterType((*DagParams)(nil), "api.DagParams")
	proto.RegisterType((*Proof)(nil), "api.Proof")
	proto.RegisterType((*Labels)(nil), "api.Labels")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PoetCoreProver service

type PoetCoreProverClient interface {
	Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error)
	GetNIP(ctx context.Context, in *GetNIPRequest, opts ...grpc.CallOption) (*GetNIPResponse, error)
	GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error)
	Clean(ctx context.Context, in *CleanRequest, opts ...grpc.CallOption) (*CleanResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type poetCoreProverClient struct {
	cc *grpc.ClientConn
}

func NewPoetCoreProverClient(cc *grpc.ClientConn) PoetCoreProverClient {
	return &poetCoreProverClient{cc}
}

func (c *poetCoreProverClient) Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error) {
	out := new(ComputeResponse)
	err := grpc.Invoke(ctx, "/api.PoetCoreProver/Compute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poetCoreProverClient) GetNIP(ctx context.Context, in *GetNIPRequest, opts ...grpc.CallOption) (*GetNIPResponse, error) {
	out := new(GetNIPResponse)
	err := grpc.Invoke(ctx, "/api.PoetCoreProver/GetNIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poetCoreProverClient) GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error) {
	out := new(GetProofResponse)
	err := grpc.Invoke(ctx, "/api.PoetCoreProver/GetProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poetCoreProverClient) Clean(ctx context.Context, in *CleanRequest, opts ...grpc.CallOption) (*CleanResponse, error) {
	out := new(CleanResponse)
	err := grpc.Invoke(ctx, "/api.PoetCoreProver/Clean", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poetCoreProverClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := grpc.Invoke(ctx, "/api.PoetCoreProver/Shutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PoetCoreProver service

type PoetCoreProverServer interface {
	Compute(context.Context, *ComputeRequest) (*ComputeResponse, error)
	GetNIP(context.Context, *GetNIPRequest) (*GetNIPResponse, error)
	GetProof(context.Context, *GetProofRequest) (*GetProofResponse, error)
	Clean(context.Context, *CleanRequest) (*CleanResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
}

func RegisterPoetCoreProverServer(s *grpc.Server, srv PoetCoreProverServer) {
	s.RegisterService(&_PoetCoreProver_serviceDesc, srv)
}

func _PoetCoreProver_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetCoreProverServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoetCoreProver/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetCoreProverServer).Compute(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoetCoreProver_GetNIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetCoreProverServer).GetNIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoetCoreProver/GetNIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetCoreProverServer).GetNIP(ctx, req.(*GetNIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoetCoreProver_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetCoreProverServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoetCoreProver/GetProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetCoreProverServer).GetProof(ctx, req.(*GetProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoetCoreProver_Clean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetCoreProverServer).Clean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoetCoreProver/Clean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetCoreProverServer).Clean(ctx, req.(*CleanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoetCoreProver_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetCoreProverServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoetCoreProver/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetCoreProverServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PoetCoreProver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PoetCoreProver",
	HandlerType: (*PoetCoreProverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _PoetCoreProver_Compute_Handler,
		},
		{
			MethodName: "GetNIP",
			Handler:    _PoetCoreProver_GetNIP_Handler,
		},
		{
			MethodName: "GetProof",
			Handler:    _PoetCoreProver_GetProof_Handler,
		},
		{
			MethodName: "Clean",
			Handler:    _PoetCoreProver_Clean_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _PoetCoreProver_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for PoetVerifier service

type PoetVerifierClient interface {
	VerifyProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error)
	VerifyNIP(ctx context.Context, in *VerifyNIPRequest, opts ...grpc.CallOption) (*VerifyNIPResponse, error)
	GetRndChallenge(ctx context.Context, in *GetRndChallengeRequest, opts ...grpc.CallOption) (*GetRndChallengeResponse, error)
}

type poetVerifierClient struct {
	cc *grpc.ClientConn
}

func NewPoetVerifierClient(cc *grpc.ClientConn) PoetVerifierClient {
	return &poetVerifierClient{cc}
}

func (c *poetVerifierClient) VerifyProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error) {
	out := new(VerifyProofResponse)
	err := grpc.Invoke(ctx, "/api.PoetVerifier/VerifyProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poetVerifierClient) VerifyNIP(ctx context.Context, in *VerifyNIPRequest, opts ...grpc.CallOption) (*VerifyNIPResponse, error) {
	out := new(VerifyNIPResponse)
	err := grpc.Invoke(ctx, "/api.PoetVerifier/VerifyNIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poetVerifierClient) GetRndChallenge(ctx context.Context, in *GetRndChallengeRequest, opts ...grpc.CallOption) (*GetRndChallengeResponse, error) {
	out := new(GetRndChallengeResponse)
	err := grpc.Invoke(ctx, "/api.PoetVerifier/GetRndChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PoetVerifier service

type PoetVerifierServer interface {
	VerifyProof(context.Context, *VerifyProofRequest) (*VerifyProofResponse, error)
	VerifyNIP(context.Context, *VerifyNIPRequest) (*VerifyNIPResponse, error)
	GetRndChallenge(context.Context, *GetRndChallengeRequest) (*GetRndChallengeResponse, error)
}

func RegisterPoetVerifierServer(s *grpc.Server, srv PoetVerifierServer) {
	s.RegisterService(&_PoetVerifier_serviceDesc, srv)
}

func _PoetVerifier_VerifyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetVerifierServer).VerifyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoetVerifier/VerifyProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetVerifierServer).VerifyProof(ctx, req.(*VerifyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoetVerifier_VerifyNIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyNIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetVerifierServer).VerifyNIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoetVerifier/VerifyNIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetVerifierServer).VerifyNIP(ctx, req.(*VerifyNIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoetVerifier_GetRndChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRndChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoetVerifierServer).GetRndChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PoetVerifier/GetRndChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoetVerifierServer).GetRndChallenge(ctx, req.(*GetRndChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PoetVerifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PoetVerifier",
	HandlerType: (*PoetVerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyProof",
			Handler:    _PoetVerifier_VerifyProof_Handler,
		},
		{
			MethodName: "VerifyNIP",
			Handler:    _PoetVerifier_VerifyNIP_Handler,
		},
		{
			MethodName: "GetRndChallenge",
			Handler:    _PoetVerifier_GetRndChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb5, 0xb1, 0x1a, 0x92, 0x49, 0x9a, 0x8f, 0x49, 0x9b, 0xba, 0x6e, 0x54, 0x2c, 0x83,
	0x44, 0x9f, 0x6a, 0x35, 0x14, 0x2e, 0x10, 0xa4, 0x02, 0xaa, 0x90, 0x65, 0x50, 0x1f, 0x2a, 0xf1,
	0xe0, 0x26, 0x5b, 0xc7, 0x92, 0xeb, 0x5d, 0xec, 0x6d, 0x69, 0x5f, 0xb9, 0x02, 0x57, 0xe0, 0x1a,
	0x9c, 0x82, 0x2b, 0x70, 0x10, 0xe4, 0xdd, 0x75, 0x6a, 0xd7, 0x11, 0x54, 0xbc, 0x79, 0x66, 0x67,
	0x7e, 0x33, 0xb3, 0x3b, 0xff, 0x04, 0xda, 0x01, 0x8f, 0x0e, 0x79, 0xca, 0x04, 0x43, 0x23, 0xe0,
	0x91, 0x35, 0x09, 0x19, 0x0b, 0x63, 0xea, 0x06, 0x3c, 0x72, 0x83, 0x24, 0x61, 0x22, 0x10, 0x11,
	0x4b, 0x32, 0x15, 0xe2, 0x1c, 0x42, 0x6f, 0xc6, 0xae, 0xf8, 0xb5, 0xa0, 0x3e, 0xfd, 0x72, 0x4d,
	0x33, 0x81, 0x13, 0x20, 0x0b, 0x93, 0xd8, 0xe4, 0xa0, 0x33, 0xed, 0x1d, 0xe6, 0xac, 0x37, 0x41,
	0xe8, 0x05, 0x69, 0x70, 0x95, 0xf9, 0x64, 0xe1, 0x3c, 0x83, 0xfe, 0x2a, 0x3e, 0xe3, 0x2c, 0xc9,
	0x28, 0x0e, 0xc0, 0xe0, 0xcb, 0x48, 0xa6, 0x74, 0xfd, 0xfc, 0xd3, 0xe9, 0xc3, 0xe6, 0x09, 0x15,
	0x1f, 0xde, 0x79, 0x9a, 0xe9, 0x4c, 0xa1, 0x57, 0x38, 0x74, 0x92, 0x0d, 0x1b, 0x3c, 0x65, 0xec,
	0x52, 0x57, 0x02, 0x59, 0xc9, 0xcb, 0x3d, 0xbe, 0x3a, 0x70, 0x9e, 0x42, 0xff, 0x84, 0x0a, 0xe5,
	0xd2, 0xad, 0x75, 0x81, 0xcc, 0x4d, 0x62, 0x1b, 0x07, 0x6d, 0x9f, 0xcc, 0x9d, 0x63, 0x18, 0xdc,
	0x07, 0x3c, 0x1a, 0xdb, 0x83, 0xee, 0x2c, 0xa6, 0x41, 0x52, 0xb4, 0xd6, 0x87, 0x4d, 0x6d, 0x2b,
	0x84, 0x33, 0x84, 0xfe, 0xc7, 0xe5, 0xb5, 0x58, 0xb0, 0xaf, 0xab, 0x18, 0x84, 0xc1, 0xbd, 0x4b,
	0x87, 0x9d, 0x03, 0x9e, 0xd1, 0x34, 0xba, 0xbc, 0xab, 0x74, 0xf8, 0xd7, 0xcb, 0x43, 0x13, 0x08,
	0x37, 0x1b, 0xb5, 0xce, 0x08, 0x57, 0x93, 0x19, 0xc5, 0x64, 0x47, 0x30, 0xaa, 0xb0, 0xf5, 0x70,
	0x16, 0xb4, 0x6e, 0x72, 0x77, 0x44, 0x55, 0x8d, 0x96, 0xbf, 0xb2, 0x9d, 0xf7, 0x30, 0x50, 0x29,
	0xf7, 0xb7, 0xfe, 0xbf, 0xcd, 0x38, 0x2e, 0x0c, 0x4b, 0xac, 0x47, 0x14, 0x7f, 0x0d, 0xe3, 0x13,
	0x2a, 0xfc, 0x64, 0x31, 0x5b, 0x06, 0x71, 0x4c, 0x93, 0xf0, 0x91, 0xcb, 0xf4, 0x02, 0x76, 0x6a,
	0x79, 0xba, 0x5c, 0xf5, 0x42, 0x5e, 0x41, 0x7b, 0x95, 0x98, 0x1f, 0xdd, 0xea, 0x6d, 0x23, 0xb7,
	0xb9, 0x95, 0xc8, 0x31, 0x36, 0x7d, 0x92, 0xe4, 0xd6, 0xd2, 0x34, 0x6c, 0x92, 0xa7, 0x2d, 0x9d,
	0x63, 0xd8, 0x90, 0x43, 0xd5, 0x57, 0x14, 0x77, 0x81, 0xc4, 0x66, 0xc3, 0x36, 0x0e, 0x3a, 0xd3,
	0x8e, 0x6c, 0xec, 0x34, 0xb8, 0xa0, 0x71, 0xe6, 0x93, 0xd8, 0xb1, 0xa1, 0xa9, 0x0c, 0x1c, 0x43,
	0x33, 0x96, 0x5f, 0x72, 0xe9, 0xba, 0xbe, 0xb6, 0xa6, 0x3f, 0x0c, 0xe8, 0x79, 0x8c, 0x8a, 0x19,
	0x4b, 0xa9, 0x97, 0xb2, 0x1b, 0x9a, 0xa2, 0x07, 0x4f, 0xb4, 0x2e, 0x70, 0x24, 0x79, 0x55, 0x55,
	0x59, 0x5b, 0x55, 0xa7, 0x5e, 0x22, 0xeb, 0xdb, 0xaf, 0xdf, 0xdf, 0x1b, 0x5b, 0x88, 0xee, 0xcd,
	0x91, 0xcb, 0x25, 0xc9, 0x9d, 0x6b, 0xcc, 0x29, 0x34, 0x95, 0x66, 0x10, 0x65, 0x6e, 0x45, 0x51,
	0xd6, 0xa8, 0xe2, 0xd3, 0xb8, 0x5d, 0x89, 0x1b, 0xe1, 0xb0, 0x84, 0x0b, 0xa9, 0x48, 0x22, 0x8e,
	0x3e, 0xb4, 0x0a, 0xb1, 0xe0, 0x56, 0x91, 0x5b, 0x5e, 0x5d, 0x6b, 0xfb, 0x81, 0xf7, 0xdf, 0xcc,
	0xb7, 0xb0, 0x21, 0xa5, 0x83, 0x43, 0x35, 0x5c, 0x49, 0x56, 0x16, 0x96, 0x5d, 0x1a, 0x65, 0x4a,
	0x14, 0xe2, 0xa0, 0x3c, 0xad, 0x04, 0x7c, 0x82, 0x56, 0x21, 0x30, 0xdd, 0xdd, 0x03, 0x09, 0xea,
	0xee, 0x6a, 0x2a, 0xdc, 0x93, 0xc8, 0x6d, 0x1c, 0x95, 0x90, 0x99, 0x0e, 0x9a, 0xfe, 0x6c, 0x40,
	0x37, 0x7f, 0xa6, 0x33, 0xb5, 0xa7, 0x29, 0x7e, 0x86, 0x4e, 0x49, 0x57, 0xb8, 0x23, 0x99, 0x75,
	0x15, 0x5b, 0x66, 0xfd, 0x60, 0x5d, 0x3d, 0xbd, 0xff, 0xa9, 0xfa, 0xb8, 0xc3, 0x73, 0x68, 0xaf,
	0x74, 0x83, 0xdb, 0x25, 0x46, 0xe9, 0xdd, 0xc6, 0x0f, 0xdd, 0x1a, 0xbc, 0x2f, 0xc1, 0x26, 0x8e,
	0xd7, 0x80, 0xf3, 0xbb, 0x4e, 0xe5, 0xaf, 0x61, 0x59, 0x2a, 0xb8, 0x57, 0x3c, 0xd8, 0x1a, 0xe1,
	0x59, 0x93, 0xf5, 0x87, 0xba, 0xda, 0x73, 0x59, 0x6d, 0x1f, 0x27, 0x95, 0x6a, 0x21, 0x15, 0x69,
	0xb2, 0x98, 0x17, 0xd1, 0x17, 0x4d, 0xf9, 0x17, 0xf1, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x15, 0xc9, 0xd1, 0x90, 0x52, 0x06, 0x00, 0x00,
}
